<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.42</string>
	<key>AMApplicationVersion</key>
	<string>2.9</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}	set choice to choose from list {"Installer", "Multimedia", "Extra", "Study", "Backups", "Install macOS High Sierra", "Install macOS Mojave"} with title "Volume Mounter" with prompt "Choose Volume" default items "Installer" with multiple selections allowed	if choice is equal to "Installer" then		set volumeName to "Installer"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Multimedia" then		set volumeName to "Multimedia"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Extra" then		set volumeName to "Extra"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Study" then		set volumeName to "Study"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Backups" then		set volumeName to "Backups"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Windows" then		set volumeName to "Windows"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Install macOS Mojave" then		set volumeName to "Install macOS Mojave"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""			else if choice is equal to "Install macOS High Sierra" then		set volumeName to "Install macOS High Sierra"		set volumeInfo to do shell script "diskutil list | grep \"" &amp; volumeName &amp; "\""		set volumeNode to last word of volumeInfo		set output to do shell script "diskutil mount " &amp; volumeNode &amp; ""	end if				tell application "System Events"		set windowtitle to the title of every window of process "Finder"	end tell	tell application "Finder"		activate		if choice is in windowtitle then			set target of window choice to choice		else			make new Finder window to choice		end if	end tell		display dialog input as string		if input is equal to {} then		tell me to quit	else		try			tell application "Finder"				display dialog input as string				move input to choice			end tell		on error errmsg			if errmsg is equal to "An item with the same name already exists in this location." then				display dialog "Already copied item" with title "Volume Mounter"			end if		end try	end ifend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>ACFF9AD2-624E-4E00-8B9B-45C04D4C2EC9</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>589F495A-6761-42C6-B579-BCC564356F1D</string>
				<key>UUID</key>
				<string>2E10326F-A023-408F-BDA2-B62F83E6AF1B</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>450.000000:563.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
